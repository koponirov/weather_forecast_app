{"version":3,"sources":["components/Header/Header.module.css","components/Preloader/Preloader.module.css","components/Form/FormikField/FormikField.js","components/Form/SearchForm.js","queries.js","components/WeatherCard/WeatherCard.jsx","selectors.js","components/Preloader/Preloader.js","components/WeatherCard/WeatherCardContainer.jsx","components/Search.js","components/Row.js","components/Back.js","components/List/List.js","components/DateRow.js","components/City.js","components/Header/Header.js","components/App/App.js","server.js","index.js","components/WeatherCard/WeatherCard.module.css"],"names":["module","exports","FormikField","label","name","placeholder","className","as","TextField","helperText","variant","autoComplete","fullWidth","useStyles","makeStyles","theme","container","display","flexDirection","link","textDecoration","btn","marginRight","btnContainer","justifyContent","margin","FormContainer","inject","observer","store","SearchForm","props","classes","validationSchema","Yup","shape","city","min","max","required","initialValues","onSubmit","values","charAt","toUpperCase","slice","setCurrentCity","dirty","isValid","Button","disabled","type","size","color","to","CURRENT_WEATHER","gql","DETAILED_WEATHER","WeatherCard","tempC","weather","s","Card","card","CardContent","Typography","align","gutterBottom","CardActions","favoriteCitiesList","some","favCity","currentCity","onClick","addCityToFavorites","getCurrentTemperature","data","getCurrentWeather","main","temp_c","toFixed","getCurrentCityWeather","Preloader","preloader_container","CircularProgress","WeatherCardContainer","useQuery","variables","loading","error","getCityName","Search","Row","path","List","button","component","Link","Grid","spacing","item","xs","sm","ListItemSecondaryAction","IconButton","aria-label","removeCityFromFavorites","Delete","fontSize","Divider","Back","ArrowBack","ListItem","message","ListComponent","length","map","key","DateRow","date","CurrentDateWeather","utcDate","zonedTimeToUtc","dt_txt","format","getDate","getTemperature","getCityWeather","compose","withRouter","match","params","cityName","lineItem","getWeather","list","dt","Header","AppBar","position","header_container","Toolbar","toolbar","App","Container","exact","render","client","ApolloClient","uri","Store","push","filter","c","this","decorate","observable","action","addCityToFavorite","appStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a3ad8f58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_container\":\"Header_header_container__WyXcg\",\"toolbar\":\"Header_toolbar__1w_wn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader_container\":\"Preloader_preloader_container__eihg0\"};","import React from \"react\";\r\nimport { Field, ErrorMessage} from \"formik\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst FormikField = ({ label = '', name, placeholder = 'Input city name to start, for example: Moscow' }) => {\r\n    return (\r\n        <div className='FormikField'>\r\n            <Field as={TextField}\r\n                   label={label}\r\n                   name={name}\r\n                   helperText={<ErrorMessage name={name}/>}\r\n                   variant=\"outlined\"\r\n                   autoComplete=\"off\"\r\n                   placeholder={placeholder}\r\n                   fullWidth\r\n            />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FormikField;","import React from \"react\";\r\nimport {Form, Formik} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport FormikField from \"./FormikField/FormikField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    link: {\r\n        textDecoration: 'none'\r\n    },\r\n    btn: {\r\n        marginRight: '20px'\r\n    },\r\n    btnContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: '20px 0'\r\n\r\n    },\r\n\r\n}));\r\n\r\nconst FormContainer = inject(\"store\")(observer(({store}) => <SearchForm store={store}/>))\r\n\r\nconst SearchForm = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n        city: ''\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        city: Yup.string()\r\n            .min(2, 'Too short')\r\n            .max(25,'The longest city name is Aleksandrovsk-Sakhalinskiy')\r\n            .required('Please, type city name')\r\n    });\r\n\r\n    const handleSubmit = (values) => {\r\n        const city = values.city.charAt(0).toUpperCase() + values.city.slice(1);\r\n        props.store.setCurrentCity(city)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                validationSchema={validationSchema}\r\n            >\r\n                {\r\n                    ({dirty, isValid}) => {\r\n                        return (\r\n                            <Form className={classes.container}>\r\n                                <div>\r\n                                    <FormikField name=\"city\"/>\r\n                                </div>\r\n                                <div className={classes.btnContainer}>\r\n                                    <Button disabled={!dirty || !isValid}\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            size=\"large\"\r\n                                            color=\"primary\"\r\n                                            className={classes.btn}\r\n                                    >Get forecast</Button>\r\n\r\n                                    <NavLink to={'/list'} className={classes.link}>\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            color=\"primary\"\r\n                                            className={classes.btn}\r\n                                        >favorites</Button>\r\n                                    </NavLink>\r\n                                </div>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                }\r\n            </Formik>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FormContainer;","import {gql} from \"apollo-boost\";\r\n\r\nexport const CURRENT_WEATHER = gql`\r\n   query currentCityWeather($city: String!) {\r\n     getCurrentWeather(cityName: $city) {\r\n         weather {\r\n             main\r\n             description\r\n         }\r\n         main{\r\n             temp_c\r\n         }\r\n         name\r\n     }\r\n   }\r\n `;\r\n\r\nexport const DETAILED_WEATHER = gql`\r\nquery detailedCityWeather($city: String!) {\r\n  getWeather(cityName: $city) {\r\n    message\r\n    list {\r\n\r\n        main {\r\n            temp_c\r\n        }\r\n        dt\r\n        weather {\r\n            main\r\n        }\r\n        dt_txt\r\n    }\r\n  }\r\n}\r\n`;","import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport s from './WeatherCard.module.css'\r\nimport {observer} from \"mobx-react\";\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst WeatherCard = observer(({tempC, name, weather, store}) => {\r\n\r\n    const addToFavList = (city) => {\r\n\r\n        if (store.favoriteCitiesList.some(favCity => favCity === city)) {\r\n            return\r\n        } else {\r\n            store.addCityToFavorites(city)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={s.container}>\r\n\r\n            <Card className={s.card}>\r\n                <CardContent>\r\n                    <Typography variant=\"h2\"\r\n                                align='center'\r\n                                gutterBottom='true'\r\n                    >{name}\r\n                    </Typography>\r\n                    <Typography variant=\"h4\"\r\n                                align='center'\r\n                                gutterBottom='true'\r\n                    >{tempC} &#8451;\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\"\r\n                                variant=\"h4\"\r\n                                align='center'\r\n                    >{weather}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions className={s.container}>\r\n                    {\r\n                        (store.favoriteCitiesList.some(favCity => favCity === store.currentCity)) ?\r\n                            <Typography variant=\"h6\" color=\"textSecondary\" className={s.container}>\r\n                                this city is already in favorites</Typography> :\r\n                            <Button size=\"small\"\r\n                                    color=\"primary\"\r\n                                    align='center'\r\n                                    onClick={() => addToFavList(store.currentCity)}\r\n                            >Add to favorites</Button>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default WeatherCard;","import {zonedTimeToUtc} from \"date-fns-tz\";\r\nimport {format} from \"date-fns\";\r\n\r\nexport const getCurrentTemperature = (data) => {\r\n    return data.getCurrentWeather.main.temp_c.toFixed(1)\r\n};\r\n\r\nexport const getTemperature = (data) => {\r\n    return data.main.temp_c.toFixed(1)\r\n};\r\n\r\nexport const getCityName = (data) => {\r\n    return data.getCurrentWeather.name\r\n};\r\n\r\nexport const getCurrentCityWeather = (data) => {\r\n    return data.getCurrentWeather.weather[0].main;\r\n};\r\n\r\nexport const getCityWeather = (data) => {\r\n    return data.weather[0].main;\r\n};\r\n\r\nexport const getDate = (data) => {\r\n\r\n    const utcDate = zonedTimeToUtc(data.dt_txt, 'UTC+00:00');\r\n\r\n    return format(utcDate,\"EEEE (d.MM) HH:mm\");\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport s from './Preloader.module.css'\r\n\r\nconst Preloader = () => <div className={s.preloader_container}><CircularProgress /></div>;\r\n\r\nexport default Preloader;","import {inject, observer} from \"mobx-react\";\r\nimport {useQuery} from \"@apollo/react-hooks\";\r\nimport React from \"react\";\r\nimport {CURRENT_WEATHER} from \"../../queries\"\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport s from './WeatherCard.module.css'\r\nimport {getCityName, getCurrentCityWeather, getCurrentTemperature} from \"../../selectors\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst WeatherCardContainer = inject(\"store\")(observer(({ store }) => {\r\n\r\n    const city = store.currentCity;\r\n\r\n    const { loading, error, data } = useQuery(CURRENT_WEATHER, {\r\n        variables: { city },\r\n    });\r\n\r\n    if (loading) return <Preloader/>\r\n    if (error) return (\r\n        <Typography variant=\"h6\" color=\"textSecondary\" className={s.container}>\r\n            Invalid city name or connection problem</Typography>);\r\n\r\n    const tempC = getCurrentTemperature(data);\r\n    const name = getCityName(data);\r\n    const weather = getCurrentCityWeather(data);\r\n\r\n    return (\r\n        <WeatherCard tempC={tempC} name={name} weather={weather} store={store} />\r\n    )\r\n}));\r\n\r\nexport default WeatherCardContainer;\r\n","import React from \"react\";\r\nimport FormContainer from \"./Form/SearchForm\";\r\nimport WeatherCardContainer from \"./WeatherCard/WeatherCardContainer\";\r\n\r\nconst Search = () => {\r\n\r\n    return (\r\n        <div>\r\n            <FormContainer/>\r\n            <WeatherCardContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport {IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {Link} from \"react-router-dom\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nexport default function Row({city, tempC, weather, path, store}) {\r\n\r\n    return (<List>\r\n            <ListItem button component={Link} to={path}>\r\n                <Grid container spacing={0}>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant=\"h5\">{city}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant=\"h6\" color=\"textSecondary\">{tempC} &#8451;</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant=\"h6\">{weather}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton aria-label=\"delete\"\r\n                                onClick={() => store.removeCityFromFavorites(city)}>\r\n                        <Delete fontSize=\"small\"/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n\r\n            </ListItem>\r\n            <Divider/>\r\n        </List>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {ArrowBack} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\n\r\nconst Back = () => {\r\n    return (\r\n        <IconButton aria-label=\"back\" >\r\n            <ArrowBack/>\r\n        </IconButton>\r\n    )\r\n};\r\n\r\nexport default Back;\r\n","import React from \"react\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {useQuery} from \"@apollo/react-hooks\";\r\nimport {CURRENT_WEATHER} from \"../../queries\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Row from \"../Row\";\r\nimport Back from \"../Back\";\r\nimport List from '@material-ui/core/List';\r\nimport {getCurrentCityWeather, getCurrentTemperature} from \"../../selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\n\r\nconst ListItem = ({city, store}) => {\r\n\r\n    const {loading, error, data} = useQuery(CURRENT_WEATHER, {\r\n        variables: {city},\r\n    });\r\n\r\n    if (loading || !data) return <Preloader/>;\r\n    if (error) return <Typography variant=\"h6\" color=\"textSecondary\">{error.message}</Typography>;\r\n\r\n\r\n    const path = `/city/${city}`;\r\n    const tempC = getCurrentTemperature(data);\r\n    const weather = getCurrentCityWeather(data);\r\n\r\n    return <Row city={city} store={store}\r\n                tempC={tempC} path={path} weather={weather}/>\r\n};\r\n\r\nconst ListComponent = inject(\"store\")(observer(({ store }) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={'/search'}>\r\n                    <Back/>\r\n                </NavLink>\r\n                <Typography variant=\"h2\"\r\n                            align='center'\r\n                            gutterBottom='true'\r\n                >Favorite cities\r\n                </Typography>\r\n            </div>\r\n\r\n            {store.favoriteCitiesList.length > 0 ?\r\n                <List>\r\n                    {store.favoriteCitiesList.map(city => <ListItem key={city} city={city} store={store}/>)}\r\n                </List> :\r\n                <Typography variant=\"h5\"\r\n                            color=\"textSecondary\"\r\n                            align='center'\r\n                            gutterBottom='true'\r\n                >favorite cities not added yet,\r\n                    go back to Search\r\n                </Typography>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}));\r\n\r\nexport default ListComponent;\r\n\r\n","import React from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nexport default function DateRow({date, tempC, weather}) {\r\n\r\n    return (<List>\r\n            <ListItem>\r\n                <Grid container spacing={0}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography variant=\"h6\">{date}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant=\"h6\"\r\n                                    color='textSecondary'\r\n                                    align='left'\r\n                        >{tempC} &#8451;</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant=\"h6\"\r\n                                    align='left'\r\n                        >{weather}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </ListItem>\r\n            <Divider/>\r\n        </List>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { compose } from \"recompose\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { DETAILED_WEATHER } from \"../queries\";\r\nimport Back from \"./Back\";\r\nimport DateRow from \"./DateRow\";\r\nimport { getCityWeather, getDate, getTemperature } from \"../selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Preloader from \"./Preloader/Preloader\";\r\nimport s from \"./WeatherCard/WeatherCard.module.css\";\r\n\r\nconst CurrentDateWeather = ({data}) => {\r\n\r\n    const date = getDate(data);\r\n\r\n    const tempC = getTemperature(data);\r\n\r\n    const weather = getCityWeather(data);\r\n\r\n    return <DateRow date={date} tempC={tempC} weather={weather}/>\r\n};\r\n\r\nconst City = (props) => {\r\n\r\n    const city = props.match.params.cityName;\r\n\r\n    const {loading, error, data} = useQuery(DETAILED_WEATHER, {\r\n        variables: {city},\r\n    });\r\n\r\n    if (loading) return <Preloader/>;\r\n    if (error) return (\r\n        <Typography variant=\"h6\" color=\"textSecondary\" className={s.container}>\r\n            Invalid city name or connection problem</Typography>);\r\n\r\n    const lineItem = data.getWeather.list.map(\r\n        data => <CurrentDateWeather key={data.dt} data={data}/>);\r\n\r\n    return (\r\n        <div>\r\n            <NavLink to={'/list'}>\r\n                <Back/>\r\n            </NavLink>\r\n            <Typography variant=\"h2\"\r\n                        align='center'\r\n                        gutterBottom='true'\r\n            >{city}\r\n            </Typography>\r\n            <Typography variant=\"h5\"\r\n                        color=\"textSecondary\"\r\n                        align='center'\r\n                        gutterBottom='true'\r\n            >Detailed hourly forecast for the next 5 days:\r\n            </Typography>\r\n            <div>{lineItem}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default compose(withRouter)(City);","import React from \"react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport s from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <AppBar position=\"static\" className={s.header_container}>\r\n            <Toolbar className={s.toolbar}>\r\n                <Typography variant=\"h3\" align='center'>\r\n                    Weather forecast\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Search from \"../Search\";\nimport {Redirect, Switch, Route} from \"react-router-dom\";\nimport ListComponent from \"../List/List\";\nimport City from \"../City\";\nimport Container from \"@material-ui/core/Container\";\nimport Header from \"../Header/Header\";\n\nfunction App() {\n\n    return (\n        <section>\n            <Header/>\n            <Container className='container'>\n                <Switch>\n                    <Route exact path='/'\n                           render={() => <Redirect to={'/search'}/>}/>\n                    <Route path='/search'\n                           render={() => <Search/>}/>\n                    <Route path='/list'\n                           render={() => <ListComponent/>}/>\n                    <Route path='/city/:cityName'\n                           render={() => <City/>}/>\n                </Switch>\n            </Container>\n        </section>\n    );\n}\n\nexport default App;\n","import ApolloClient from \"apollo-boost\";\r\n\r\nexport const client = new ApolloClient({\r\n    uri: 'https://7b3u2.sse.codesandbox.io/http://127.0.0.1:4000',\r\n});\r\n\r\n//http://127.0.0.1:4000\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport {Provider} from \"mobx-react\";\r\nimport {action, decorate, observable} from \"mobx\";\r\nimport {ApolloProvider} from \"@apollo/react-hooks\";\r\nimport {client} from \"./server\";\r\n\r\nclass Store {\r\n    currentCity = ' ';\r\n    favoriteCitiesList = [];\r\n\r\n    // \"Berlin\",\"Stockholm\",\"Paris\",\r\n    // \"Madrid\",\"Novosibirsk\",\"Moscow\", \"valencia\",\"bilbao\",\"Barcelona\",\"New York\",\"Florida\",\r\n    // \"Calgary\",\"Oslo\",\"washington\",\"colorado\"\r\n\r\n    setCurrentCity(city) {\r\n        this.currentCity = city\r\n    }\r\n\r\n    addCityToFavorites = (city) => {\r\n        this.favoriteCitiesList.push(city)\r\n    }\r\n    removeCityFromFavorites = (city) => {\r\n        this.favoriteCitiesList = this.favoriteCitiesList.filter(c => c !== city)\r\n    }\r\n};\r\n\r\ndecorate(Store, {\r\n    currentCity: observable,\r\n    favoriteCitiesList: observable,\r\n    setCurrentCity: action,\r\n    addCityToFavorite: action,\r\n    removeCityFromFavorites: action\r\n});\r\n\r\nconst appStore = new Store();\r\n\r\nReactDOM.render((\r\n\r\n        <ApolloProvider client={client}>\r\n            <BrowserRouter>\r\n                <Provider store={appStore}>\r\n                    <App/>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        </ApolloProvider>\r\n    ),\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WeatherCard_container__d9JPB\",\"card\":\"WeatherCard_card__3WHj_\"};"],"sourceRoot":""}